#!/bin/bash

function usage()
{
cat << EOUSAGE
Usage: ssh-server list
       ssh-server add SERVER_NAME USER IP [PORT] [PRIVATE_KEY_FILE]
       ssh-server del SERVER_NAME
       ssh-server reset SERVER_NAME
EOUSAGE
}

# Name-to-ip mapping file
THIS_FOLDER="${0%/*}"
source "${THIS_FOLDER}/func/utility.func"
IP_MAP_FILE="${THIS_FOLDER}/func/name-to-ip.list"

# Add a server into server mapping file
function ssh-target-add
{
    if [ ${#} -lt 3 ]; then
        usage
        exit 1
    fi
    declare -i EXIST=0
    SERVER_NAME=${1}
    SERVER_USER=${2}
    SERVER_IP=${3}
    SERVER_PORT=${4}
    PRIVATE_KEY_FILE=${5}

    if [ "${SERVER_PORT}" == "" ]; then
        SERVER_PORT="22"
    fi
 
    if [ "${SERVER_PORT}" != "" ]; then
        WITH_KEY="-i ${PRIVATE_KEY_FILE} "
        USING_KEY="(using ${PRIVATE_KEY_FILE}) "
    fi

    # Check if record aleady exist
    if [ $(isNameExist "d${THIS_FOLDER}" "n${SERVER_NAME}") == "true" ]; then
        COMFIRM_REPLACE='n'
        read -p "Server ${SERVER_NAME} already exist, overwrite ? (N/Y) " COMFIRM_REPLACE
        if [[ "${COMFIRM_REPLACE}" != "y" && "${COMFIRM_REPLACE}" != "Y" ]]; then 
            exit 0
        fi
        EXIST=1
        sed -i "/SERVER_${SERVER_NAME}_IP/d" "${IP_MAP_FILE}"
    fi

    # Add record
    sed -i '/BEGIN_OF_IP_LIST/a'"SERVER_${SERVER_NAME}_IP=\"${SERVER_PORT} ${WITH_KEY}${SERVER_USER}@${SERVER_IP}\"" "${IP_MAP_FILE}"

    # Check result
    if [ $(isNameExist "d${THIS_FOLDER}" "n${SERVER_NAME}") == "false" ]; then
        echo "[Error] Server add failed!"
    elif [ ${EXIST} -eq 1 ]; then
        echo "[Done] Server ${SERVER_NAME} modified => [${SERVER_USER}] ${SERVER_IP} : ${SERVER_PORT} ${USING_KEY}succeeful."
    else
        echo "[Done] Server ${SERVER_NAME} => [${SERVER_USER}] ${SERVER_IP} : ${SERVER_PORT} ${USING_KEY}added successful."
    fi
}

# Remove a server from server mapping file
function ssh-target-remove
{
    if [ ${#} -lt 1 ]; then
        usage
        exit 1
    fi
    SERVER_NAME=${1}

    # check if record exist
    if [ $(isNameExist "d${THIS_FOLDER}" "n${SERVER_NAME}") == "false" ]; then
        echo "[INFO] Server ${SERVER_NAME} not exist."
    else
        # remove record
        sed -i "/SERVER_${SERVER_NAME}_IP/d" "${IP_MAP_FILE}"
        # check result
        if [ $(isNameExist "d${THIS_FOLDER}" "n${SERVER_NAME}") == "false" ]; then
            echo "[Done] Server ${SERVER_NAME} removed successful."
        else
            echo "[ERROR] Server remove failed!"
        fi
    fi
}

# Remove the server from ${HOME}/.ssh/known_hosts file
function ssh-target-reset
{
    SERVER_NAME=${1}
    KNOWN_HOSTS="${HOME}/.ssh/known_hosts"
    SERVER_IP=`grep "SERVER_${SERVER_NAME}_IP" "${IP_MAP_FILE}" | sed 's/.*@\([^"]*\).*/\1/g'`
    sed -i "/${SERVER_IP}/d" ${KNOWN_HOSTS}
    echo "[Done] Server ${SERVER_NAME} removed from known_hosts."
}

# List all server record
function ssh-target-list
{
    grep -P "SERVER_[^_]+_IP=" "${IP_MAP_FILE}" | sed -r -e 's/SERVER_([^_]+)_IP=([^ ]+) ([^@]+)@(.+)/\1 \t=> [\3] \t\4 \t: \2/g' -e 's/"//g'
}

if [ ${#} -lt 1 ]; then
    usage
    exit 1
fi
case ${1} in
    add|modify) shift
        ssh-target-add ${*}
        ;;
    remove|delete|del) shift
        ssh-target-remove ${*}
        ;;
    list) ssh-target-list
        ;;
    reset) shift
        ssh-target-reset ${*}
        ;;
    *) usage
        ;;
esac

